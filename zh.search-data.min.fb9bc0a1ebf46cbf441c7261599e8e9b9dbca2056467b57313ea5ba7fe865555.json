[{"id":0,"href":"/docs/example/","title":"CatMQ项目文档","section":"Docs","content":" Introduction CatMQ # CatMQ 是一款在参考kafka消息架构基础上发展出来的一款典型的消息队列中间件，使用异步通信的方式和发布订阅模型消息传输队列。 通信方式和传输模型的具体说明可以看下文的通信方式介绍和消息传输模型。 CatMQ具有异步通信的优势，系统拓扑简单，系统间耦合低，主要应用于异步解耦，流量削峰填谷的场景。\n有关CatMQ的功能特性有：\n顺序消息 生产者和消费者的动态缩扩容 消费者和消息队列的动态平衡 支持一个队列被多个消费者组订阅 手动调整消费进度 消息持久化和定期清理 失败消息的保持和重新发送 管理后台网页，可自助运维治理gu "},{"id":1,"href":"/docs/example/quickstart/","title":"快速开始","section":"CatMQ项目文档","content":" 快速开始 # 本页面将简单介绍一下，如何快速的搭建一个单节点的catmq\n(一)环境准备 # Java 本项目基于JDK1.8+ 开发，启动项目的时候会需要JDK1.8+. 配置好Java以后，可以通过java -version检查java环境，样例输出如下 Java -version Java(TM) SE Runtime Environment (build 1.8.0_74-b02) Java HotSpot(TM) 64-Bit Server VM (build 25.74-b02, mixed mode) Maven 需要安装maven3.0，可以去官网下载最新版本的maven, maven 环境变量设置请参考百度谷歌。配置完成后，打开cmd命令，输入mvn -v,显示下图，表示配置完成。 Maven home: D:\\software\\apache-maven-3.6.2\\bin\\.. Java version: 1.8.0_262, vendor: Red Hat, Inc., runtime: D:\\software\\openjdk-1.8.0.262\\jre Default locale: en_US, platform encoding: GBK OS name: \u0026#34;windows 10\u0026#34;, version: \u0026#34;10.0\u0026#34;, arch: \u0026#34;amd64\u0026#34;, family: \u0026#34;windows\u0026#34; MySQL 版本要求5.7+ 连上MySQL以后，可以通过如下命令检查版本 SHOW VARIABLES WHERE Variable_name = 'version'; Variable_name Value version 5.7.0 CatMQ 需要访问字典表information_schema.tables，来获取表的自增信息，来计算待处理消息等信息。所以需要确保此表能及时更新。 对于mysql 8以上版本推荐查看 show variables like \u0026lsquo;%information_schema_stats%\u0026rsquo;; set global information_schema_stats_expiry=10; 设置字典表的更新时间。\n##（二）安装步骤\n在github上，下载代码到本地，以windows 系统为例，下面所有的项目默认目录为d://catmq. 创建数据库 catmq 需要三种消息库，分别为元数据库，正常消息库和失败消息库。 根据doc/mq_basic.sql创建元数据库，元数据库只有一个（可以设置主备）。根据doc/mq_message_node_01.sql创建正常消息库，根据doc/mq_fail_message_node_01.sql文件创建失败消息库。正常消息库和失败消息库都需要多个（可以根据自己的消息量扩容）。下图是创建的数据库样例，包括：元数据库、两个正常消息库、两个失败消息库。 mq_basic mq_suc mq_fail\n配置数据库信息 catmq默认配置了三种环境的配置信息，fat,uat,pro. 当然用户可以自行通过Spring_active添加配置其他的环境的配置。下面的演示中，默认使用fat 环境，用文本编辑工具打开 d:\\catmq\\mq-ui\\src\\main\\resources\\application-fat.properties d:\\catmq\\mq-rest\\src\\main\\resources\\application-fat.properties 将元数据库的信息配置进去 spring.datasource.url = jdbc:mysql://localhost:3306/mq_basic?useUnicode=true\u0026amp;characterEncoding=utf8\u0026amp;useSSL=false spring.datasource.username = root spring.datasource.password = root 编译运行 在d://catmq 输入mvn clean install -DskipTests 如果控制台显示success, 则证明编译成功。 默认情况portal占用8089端口，服务端占用8080端口，测试demo占用8087端口。 然后进入 d:\\catmq\\mq-rest\\target 目录下执行 java -jar mq-rest.jar \u0026ndash;spring.profiles.active=fat 启动服务端。\nd:\\mq-cat\\mq-ui\\target 目录下执行 java -jar mq-ui.jar \u0026ndash;spring.profiles.active=fat 启动管理端portal。\n注意：测试demo暂时还不能启动（需要等到消息库初始化完成，并且在portal上手动创建测试程序所需的topic、consumerGroup、订阅关系以后可以启动） 5. 启动验证系统。 在chrome浏览器访问 http://localhost:8080/ 如果出现下图表示CatMQ服务端启动正常。 访问 http://localhost:8090/ 如果出现登录页面，并且可以登录成功，则证明可以正常访问，用户名和密码都是：mqadmin (三)元数据的初始化 # 为了能够启动测试，我们需要初始化一些数据\n初始化消息的存储位置\n启动CatMQ的管理页面(CatMQ-ui模块)，通过账号和密码mqadmin登录系统。然后点击左侧的“DataNode” 点击 \u0026ldquo;Create\u0026rdquo; 跳出的数据库详细信息中，分为主库(master)和从库(slave)，如果没有从库可以不填，数据库是我们上文中提到的mq_suc 的连接信息。 注意：如果“”Database”填写的是正常消息库的名字，则“Store Type”需选择normal（如上图标红所示）。如果“”Database”填写的是失败消息库的名字，则“Store Type”需选择Abnormal。\n点击“提交”，如果看到如下记录，则说明message_node_01这一个节点初始化成功。 (四)客户端的demo显示 # 完成上述步骤以后，我们就可以去CatMQ的mq-client-demo模块中启动该模块 messageQueue.xml文件中定义了ConsumerGroup、Topic、以及它们之间的订阅关系（含义：test1sub订阅了topic：test1和test4）。receiverType指定的是每一个topic的消息处理类。\ndemo就是在项目中的模式是CatMQ 的最小可执行的Example,这里我们已经做好了messageQueue.xml的配置，此次您无需做任何修改\n新建topic\n登录系统管理页面Portal,默认为localhost:8090, 初始化的用户名和密码都为：mqadmin。登录进入以后，点击页面左侧的消息主题管理进入如下画面\n点击“创建”按钮，进入topic 创建界面，然后再“topic名称处”输入testtopic\n点击“提交”完成topic的创建。\n新建ConsumerGroup\n在管理界面，点击左侧的消费者组管理，然后点击“创建”按钮，进入consumeGroup创建界面：\n我们创建一个名为testConsumerGroup的consumerGroup\n创建成功之后，可以看到页面以及创建成功 创建订阅关系 建立consumerGroup和topic的关联,点击上一个画面中的subscribe开始订阅\n点击添加订阅，创建订阅关系\n点击确认，订阅成功 启动客户端的demo,运行程序\n进入 \u0026lsquo;cat-mq-client-test\\target\u0026rsquo; 下面执行 ‘java -jar mq-client-test-001-1.0.0.jar \u0026ndash;spring.profiles.active=fat’ 启动客户端demo 进入‘ConsumerGroupConsumer’, 出现下面的数据表示客户端启动成功,已经成功注册到系统中 测试消息的发送和消息的消费\n在浏览器中的网址栏，或者postman中输入下面的URL地址： http://localhost:8087/test1?topicName=testtopic\u0026amp;count=2 这里表示给Topic: testtopic 发送5条消息 在 catmq-client-test的 log 中会看到 下面的信息表示消息的发送和消费都正常。 常见问题 如果应用无法启用，请检查8080，8087，8087 端口是否被占用。\n"},{"id":2,"href":"/docs/example/concept/","title":"基本概念","section":"CatMQ项目文档","content":" 基本概念介绍 # 本页将主要介绍CatMq 中涉及到的基本概念，以便于用户可以更好的了解本系统\n主题（Topic） # 消息（Message） # 消费者组（ConsumerGroup） # 消费者（Consumer） # 队列（Queue） # 消息偏移（MessageQueeuOffset） # 消息标签 # 生产者/消费者（product/consumer） # 消息订阅（subscribe） # 服务端（Broke） # 管理端（Portal） # 消息标签(MessageTage) # "},{"id":3,"href":"/docs/example/hidden/","title":"Hidden","section":"CatMQ项目文档","content":" This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); } Fronde cetera dextrae sequens pennis voce muneris # Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":4,"href":"/docs/","title":"Docs","section":"Introduction","content":""}]